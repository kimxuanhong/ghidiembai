import { defineStore } from 'pinia';
import { useFirebaseStore } from './firebaseStore';

export const useGameStore = defineStore('game', {
  state: () => ({
    currentRoom: '',
    game: null,
    editingRowIndex: null,
    gameStatus: '',
    winnerMessage: '',
  }),

  getters: {
    // T√≠nh to√°n c√°c t·ªïng ƒëi·ªÉm
    totalScores: (state) => {
      if (!state.game || !state.game.scores) return [0, 0, 0, 0];

      const totals = [0, 0, 0, 0];
      state.game.scores.forEach(scores => {
        if (!scores) return;

        scores.forEach((score, index) => {
          if (typeof score === 'number') {
            totals[index] += score;
          }
        });
      });

      return totals;
    },

    // T√≠nh to√°n ng∆∞·ªùi chi·∫øn th·∫Øng
    winnerIndex: (state) => {
      if (!state.totalScores.length) return 0;
      return state.totalScores.reduce((maxIndex, score, index, array) =>
        score > array[maxIndex] ? index : maxIndex, 0);
    },

    // Ki·ªÉm tra xem game ƒë√£ k·∫øt th√∫c ch∆∞a
    isGameEnded: (state) => {
      return state.game && state.game.isEnded;
    }
  },

  actions: {
    // Reset tr·∫°ng th√°i game khi chuy·ªÉn game m·ªõi
    resetGameState() {
      this.gameStatus = '';
      this.winnerMessage = '';
      this.editingRowIndex = null;
    },

    initGame() {
      const firebaseStore = useFirebaseStore();
      
      // Reset tr·∫°ng th√°i m·ªói khi kh·ªüi t·∫°o game m·ªõi
      this.resetGameState();
      
      // C·∫≠p nh·∫≠t currentRoom
      this.currentRoom = firebaseStore.getCurrentRoom();

      // T·∫£i th√¥ng tin game hi·ªán t·∫°i
      const currentGame = firebaseStore.getCurrentGame();
      if (!currentGame) {
        return false;
      }

      firebaseStore.subscribeToGamesScore(
        this.currentRoom, 
        currentGame.firebaseId, 
        currentGame, 
        this.handleGameUpdate
      );

      return true;
    },

    handleGameUpdate(dbGame) {
      const firebaseStore = useFirebaseStore();
      const previousGameId = this.game?.firebaseId;
      
      this.game = dbGame;

      // N·∫øu ƒë√¢y l√† game m·ªõi, reset tr·∫°ng th√°i
      if (previousGameId && previousGameId !== dbGame.firebaseId) {
        this.resetGameState();
      }

      // ƒê·∫£m b·∫£o c√°c thu·ªôc t√≠nh c·∫ßn thi·∫øt t·ªìn t·∫°i
      if (!this.game.scores) {
        this.game.scores = [];
      }

      if (!this.game.totalScores) {
        this.game.totalScores = [0, 0, 0, 0];
      }

      firebaseStore.saveCurrentGame(this.game);

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu game ƒë√£ k·∫øt th√∫c
      if (this.game.isEnded) {
        this.displayWinner();
      } else {
        // N·∫øu game ch∆∞a k·∫øt th√∫c, ƒë·∫£m b·∫£o kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o ng∆∞·ªùi chi·∫øn th·∫Øng
        this.winnerMessage = '';
        this.gameStatus = '';
      }
    },

    cleanupSubscriptions() {
      const firebaseStore = useFirebaseStore();
      firebaseStore.unsubscribeToGamesScore();
      // Reset tr·∫°ng th√°i khi cleanup
      this.resetGameState();
    },

    setEditingRowIndex(index) {
      if (this.isGameEnded) return;
      this.editingRowIndex = index;
    },

    displayWinner() {
      if (!this.game || !this.game.players) return;

      this.gameStatus = 'Game ƒë√£ k·∫øt th√∫c';
      const winner = this.game.players[this.winnerIndex];
      this.winnerMessage = `${winner} chi·∫øn th·∫Øng! üéâ`;
    },

    async saveScores(scores) {
      const firebaseStore = useFirebaseStore();
      
      try {
        if (this.editingRowIndex !== null) {
          // C·∫≠p nh·∫≠t ƒëi·ªÉm cho v√≤ng hi·ªán c√≥
          await firebaseStore.editScore(
            this.currentRoom, 
            this.game.firebaseId, 
            this.editingRowIndex, 
            scores
          );
        } else {
          // Th√™m ƒëi·ªÉm m·ªõi v√†o ƒë·∫ßu m·∫£ng rounds
          await firebaseStore.addScore(
            this.currentRoom, 
            this.game.firebaseId, 
            scores
          );
        }
        this.editingRowIndex = null;
        return true;
      } catch (error) {
        console.error("L·ªói khi l∆∞u ƒëi·ªÉm:", error);
        this.editingRowIndex = null;
        return false;
      }
    },

    async endGame() {
      const firebaseStore = useFirebaseStore();
      
      try {
        // ƒê·∫∑t tr·∫°ng th√°i game l√† ƒë√£ k·∫øt th√∫c
        this.game.isEnded = true;
        // L∆∞u ng√†y gi·ªù k·∫øt th√∫c
        this.game.endDate = new Date().toISOString();
        // L∆∞u game
        await firebaseStore.closeScore(this.currentRoom, this.game.firebaseId);

        // C·∫≠p nh·∫≠t UI
        this.displayWinner();
        return true;
      } catch (error) {
        console.error("L·ªói khi k·∫øt th√∫c game:", error);
        return false;
      }
    }
  }
}); 